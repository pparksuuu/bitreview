package bitcamp.java106.pms;

import java.util.Scanner;

import bitcamp.java106.pms.controller.TeamController;
import bitcamp.java106.pms.domain.Member;
import bitcamp.java106.pms.util.Console;

// ver 0.1 - 팀 관리 기능(메서드)을 별도의 클래스로 옮긴다.
//           => controller.TeamController 클래스 추가
//           사용자 입력 기능을 별도의 클래스로 옮긴다.
//           => util.Console 클래스 추가
public class App {

    static Scanner keyScan = new Scanner(System.in);

    static Member[] members = new Member[1000];
    static int memberIndex = 0;
    static String option = null;



   

    static int getMemberIndex(String id) {
        for (int i = 0; i < memberIndex; i++) {
            if (members[i] == null) continue;
            if (option.equalsIgnoreCase(members[i].id)) {
                return i;
            }
        }
        return -1;
    }


 
    static void onQuit() {
        System.out.println("안녕히 가세요!");
    }

    static void onHelp() {
        System.out.println("팀 등록 명령 : team/add");
        System.out.println("팀 조회 명령 : team/list");
        System.out.println("팀 상세조회 명령 : team/view 팀명");

        System.out.println("=======================");

        System.out.println("회원 등록 명령 : member/add");
        System.out.println("회원 조회 명령 : member/list");
        System.out.println("회원 상세조회 명령 : member/view 아이디");

        System.out.println("=======================");
        System.out.println("종료 : quit");
    }

  

    static void onMemberAdd() {
        System.out.println("[회원 정보 입력]");
        Member member = new Member();

        System.out.print("아이디? ");
        member.id = keyScan.nextLine();

        System.out.print("이메일? ");
        member.email = keyScan.nextLine();

        System.out.print("암호?");
        member.password = keyScan.nextLine();

        members[memberIndex++] = member;
    }

    static void onMemberList() {
        System.out.println("[회원 목록]");
        for (int i = 0; i < memberIndex; i++) {
            if (members[i] == null) continue;
            System.out.printf("%s, %s, %s\n",
                    members[i].id,
                    members[i].email,
                    members[i].password);
        }
    }

    static void onMemberView() {
        if (option == null) {
            System.out.println("팀명을 입력해주세요");
            return;
        }

        Member member = null;

        int i = getMemberIndex(option);

        if (i == -1) {
            System.out.println("해당 이름의 회원이 없습니다.");
        } else {
            System.out.printf("아이디 : %s\n", members[i].id);
            System.out.printf("이메일 : %s\n", members[i].email);
            System.out.printf("암호 : %s\n", members[i].password);
        }
    }

    static void onMemberUpdate() {
        if (option == null) {
            System.out.println("아이디를 입력해주세요");
            return;
        }

        Member member = null;

        int i = getMemberIndex(option);

        if (i == -1) {
            System.out.println("해당 이름의 회원이 없습니다.");
        } else {
            Member updateMember = new Member();

            System.out.printf("아이디(%s)?", members[i].id);
            updateMember.id = keyScan.nextLine();

            System.out.printf("이메일(%s)?", members[i].email);
            updateMember.email = keyScan.nextLine();

            System.out.printf("비밀번호(%s)?", members[i].password);
            updateMember.password = keyScan.nextLine();

            members[i] = updateMember;
        }
    }

    static void onMemberDelete() {

        if (option == null) {
            System.out.println("아이디를 입력하시기 바랍니다.");
            System.out.println();
            return;
        }

        Member member = null;

        int i = getMemberIndex(option);

        if (i == -1) {
            System.out.println("해당 이름의 회원이 없습니다.");
        } else {
            if (Console.confirm("정말 삭제하시겠습니까?")) {
                members[i] = null;
                System.out.println("삭제하였습니다.");
            } 
        }
    }

    public static void main(String[] args) {
        TeamController.keyScan = keyScan;
        Console.keyScan = keyScan;
        
        while (true) {
            String[] arr = Console.prompt();

            String menu = arr[0];
            if (arr.length == 2) {
                option = arr[1];
            } else {
                option = null;
            }

            if (menu.equalsIgnoreCase("quit")) {
                onQuit();
                break;
            } else if (menu.equalsIgnoreCase("help")) {
                onHelp();
            } else if (menu.equalsIgnoreCase("team/add")) {
                TeamController.onTeamAdd();
            } else if (menu.equalsIgnoreCase("team/list")) {
                TeamController.onTeamList();
            } else if(menu.equalsIgnoreCase("team/view")) {
                TeamController.onTeamView(option);
            } else if(menu.equalsIgnoreCase("team/update")) {
                TeamController.onTeamUpdate(option);
            } else if(menu.equalsIgnoreCase("team/delete")) {
                TeamController. onTeamDelete(option);
            } else if (menu.equalsIgnoreCase("member/add")) {
                onMemberAdd();
            } else if (menu.equalsIgnoreCase("member/list")) {
                onMemberList();
            } else if (menu.equalsIgnoreCase("member/view")) {
                onMemberView();
            } else if(menu.equalsIgnoreCase("member/update")) {
                onMemberUpdate();
            } else if(menu.equalsIgnoreCase("member/delete")) {
                onMemberDelete();
            }

            System.out.println();
        }
    }
}
