package bitcamp.java106.pms;

import java.util.Scanner;

import bitcamp.java106.pms.domain.Team;

// ver 0.8 - team/view 명령을 구현한다.
    // 1단계 : 입력 값에서 명령어와 검색어를 구분한다.
    // 2단계 : 기능이나 코드가 바뀌면 그에 따라 적절히 변수명도 바뀔 필요가 있다.
// ver 0.7 - team/list 명령을 구현한다.
// ver 0.6 - team/add 명령을 구현한다
// ver 0.5 - help 명령을 구현한다
// ver 0.4 - quit 명령어 입력 시 반복문을 종료한다.
// ver 0.3 - 사용자로부터 입력 받는 것을 무한 반복한다.
// ver 0.2 - 사용자로부터 입력을 받는다.
// ver 0.1 - 명령 입력 프롬프트를 출력한다.
public class App {
    public static void main(String[] args) {
        Scanner keyScan = new Scanner(System.in);

        Team[] teams = new Team[1000];
        int teamIndex = 0;

        while (true) {
            System.out.print("명령 > ");
            String[] arr = keyScan.nextLine().split(" ");
            String menu = arr[0];
            // 입력 받은 문자열을 공백으로 잘라서 명령어와 검색어로 구분한다.
            // 다음으로 진행하기 전에 기존의 기능이 잘 되는지 확인하라!

            if (menu.equalsIgnoreCase("quit")) {
                System.out.println("안녕히 가세요!");
                break;

            } else if (menu.equalsIgnoreCase("help")) {
                System.out.println("팀 등록 명령 : team/add");
                System.out.println("팀 조회 명령 : team/list");
                System.out.println("팀 상세조회 명령 : team/view 팀명");

                System.out.println("=======================");

                System.out.println("회원 등록 명령 : member/add");
                System.out.println("회원 조회 명령 : member/list");
                System.out.println("회원 상세조회 명령 : member/view 아이디");

                System.out.println("=======================");
                System.out.println("종료 : quit");
                System.out.println();
                continue; // 다음 문장을 실행하지 않고 즉시 조건 검사로 이동한다.

            } else if (menu.equalsIgnoreCase("team/add")) {
                System.out.println("[팀 정보 입력]");
                Team team = new Team();

                System.out.print("팀명? ");
                team.name = keyScan.nextLine();

                System.out.print("설명? ");
                team.description = keyScan.nextLine();

                System.out.print("최대인원? ");
                team.maxQty = keyScan.nextInt();
                keyScan.nextLine();

                System.out.print("시작일? ");
                team.startDate = keyScan.nextLine();

                System.out.print("종료일? ");
                team.endDate = keyScan.nextLine();

                teams[teamIndex++] = team;

                System.out.println();
                continue;

            } else if (menu.equalsIgnoreCase("team/list")) {
                System.out.println("[팀 조회]");

                for (int i = 0; i < teamIndex; i++) {
                    System.out.printf("%s, %d, %s ~ %s\n",
                            teams[i].name,
                            teams[i].maxQty,
                            teams[i].startDate, teams[i].endDate);
                }
                System.out.println();
                continue;
            } else if(menu.equalsIgnoreCase("team/view")) {
                
            }

        }
    }
}
package bitcamp.java106.pms;

import java.util.Scanner;

import bitcamp.java106.pms.domain.Team;

// ver 0.8 - team/view 명령을 구현한다.
    // 1단계 : 입력 값에서 명령어와 검색어를 구분한다.
    // 2단계 : 기능이나 코드가 바뀌면 그에 따라 적절히 변수명도 바뀔 필요가 있다.
// ver 0.7 - team/list 명령을 구현한다.
// ver 0.6 - team/add 명령을 구현한다
// ver 0.5 - help 명령을 구현한다
// ver 0.4 - quit 명령어 입력 시 반복문을 종료한다.
// ver 0.3 - 사용자로부터 입력 받는 것을 무한 반복한다.
// ver 0.2 - 사용자로부터 입력을 받는다.
// ver 0.1 - 명령 입력 프롬프트를 출력한다.
public class App {
    public static void main(String[] args) {
        Scanner keyScan = new Scanner(System.in);

        Team[] teams = new Team[1000];
        int teamIndex = 0;

        while (true) {
            System.out.print("명령 > ");
            String[] arr = keyScan.nextLine().split(" ");
            String menu = arr[0];
            // 입력 받은 문자열을 공백으로 잘라서 명령어와 검색어로 구분한다.
            // 다음으로 진행하기 전에 기존의 기능이 잘 되는지 확인하라!

            if (menu.equalsIgnoreCase("quit")) {
                System.out.println("안녕히 가세요!");
                break;

            } else if (menu.equalsIgnoreCase("help")) {
                System.out.println("팀 등록 명령 : team/add");
                System.out.println("팀 조회 명령 : team/list");
                System.out.println("팀 상세조회 명령 : team/view 팀명");

                System.out.println("=======================");

                System.out.println("회원 등록 명령 : member/add");
                System.out.println("회원 조회 명령 : member/list");
                System.out.println("회원 상세조회 명령 : member/view 아이디");

                System.out.println("=======================");
                System.out.println("종료 : quit");
                System.out.println();
                continue; // 다음 문장을 실행하지 않고 즉시 조건 검사로 이동한다.

            } else if (menu.equalsIgnoreCase("team/add")) {
                System.out.println("[팀 정보 입력]");
                Team team = new Team();

                System.out.print("팀명? ");
                team.name = keyScan.nextLine();

                System.out.print("설명? ");
                team.description = keyScan.nextLine();

                System.out.print("최대인원? ");
                team.maxQty = keyScan.nextInt();
                keyScan.nextLine();

                System.out.print("시작일? ");
                team.startDate = keyScan.nextLine();

                System.out.print("종료일? ");
                team.endDate = keyScan.nextLine();

                teams[teamIndex++] = team;

                System.out.println();
                continue;

            } else if (menu.equalsIgnoreCase("team/list")) {
                System.out.println("[팀 조회]");

                for (int i = 0; i < teamIndex; i++) {
                    System.out.printf("%s, %d, %s ~ %s\n",
                            teams[i].name,
                            teams[i].maxQty,
                            teams[i].startDate, teams[i].endDate);
                }
                System.out.println();
                continue;
            } else if(menu.equalsIgnoreCase("team/view")) {
                
            }

        }
    }
}
